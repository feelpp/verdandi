/*! \file installation.dox
    \brief Installation of Verdandi.
*/

/*!
\page installation Installation

%Verdandi is supposed to be fully compliant with the <b>C++ standard</b>. This ensures portability on many platforms. It compiles at least on \ref linux, \ref macos and \ref windows. It is compatible with IDEs such as Xcode and Microsoft Visual Studio (tested on Visual C++ 2010).

\section dependencies Dependencies
%Verdandi requires:
<ul>
  <li> the software construction tool <a href="http://www.scons.org/">SCons</a> (version 1.0 or higher) for compilation; </li>
  <li> Python for both SCons and the optional Python interface (see page \ref python) to the C++ code; the generation of the interface also requires <a href="http://www.swig.org/">SWIG</a>. </li>
</ul>

Note that in %Verdandi tarball, you will also find:
<ul>
  <li> the linear algebra library <a href="http://seldon.sourceforge.net/">Seldon</a>. </li>
  <li> <a href="http://www.lua.org">Lua</a>, a scripting language. </li>
  <li> Ops, a library for reading Lua configuration files. </li>
</ul>

\section linux Linux

\subsection installation_linux Installation

Download the source code (<a href="http://verdandi.gforge.inria.fr/">Verdandi homepage</a>), usually available in a compressed file, e.g., verdandi-[version].tar.bz2. Uncompress the file, e.g., in command line: <code>tar -xvjf verdandi-[version].tar.bz2</code>. This will create the directory <code>verdandi-[version]/</code> in which you will find %Verdandi.

\subsection tests_linux Testing the installation

In order to start with %Verdandi, it is sufficient to install SCons. Make sure that the executable <code>scons</code> is available.

To compile one of the examples provided with %Verdandi, run <code>scons</code> in the directory <code>example/quadratic_model/</code>:

\precode
$ scons
\endprecode

Then to run the quadratic model example, execute the following commands:
\precode
$ forward configuration/truth.lua [1.]
$ optimal_interpolation configuration/assimilation.lua [2.]
\endprecode

This should generate results in the form of .bin files found in the directory <code>example/quadratic_model/result/</code>.

\comment
        <li>This program generates the observations by running the model with the true initial conditions described in <code>truth.lua</code>, without any error. It performs steps forward with the quadratic model without data assimilation.</li>
        <li>This program applies the optimal interpolation, starting from erroneous initial conditions described in <code>assimilation.lua</code>. The observations are those generated above by <code>forward</code>.</li>
\endcomment

\section macos MacOS

\subsection installation_macos Installation

Installation instructions for MacOS and Linux are nearly identical, except for a slight difference about the location of the directory where you have to put the files.

\subsection Xcodeproject Create a Verdandi Xcode project

<ul>
<li> Download %Verdandi and expand it to the directory of your choice (<code>MY_VERDANDI_PATH</code>). </li>

<li> Create a %Verdandi project within Xcode ("File -> New Project"). In "Xcode/New Project", select "Other/External Build System". Choose a name (<code>verdandi</code>) and select the path to the source directory (<code>MY_VERDANDI_PATH</code>).
    In "Groups & Files", right click project name (<code>verdandi</code>), then choose "Add -> Existing Files..." and add recursively the %Verdandi project directories.
 </li>
 <li> <b>Compiling under Xcode</b>: <br>

    1. In "Groups and Files -> Targets", right click "Targets" then select "Add -> New Target...", choose "other/External Target" and choose a name (for instance, <code>forward</code>).

    2. In "Groups and Files -> Targets", double click the target that was created (<code>forward</code>).

    3. In the "Build Tool" field, put the full path to scons (for example, "/usr/local/bin/scons").

    4. Set the "Directory" field to the directory that contains the SConstruct file (for example, <code>MY_VERDANDI_PATH/example/clamped_bar/</code>).

    5. In "Build Settings", specify the architectures to which the binary is targeted (for instance, "ARCHS = x86_64").

    6. You should now be able to build using the "Build" command from Xcode.

    7. Right click "Executables", choose "Add new custom executable...", make it point to the executable you are building, define the arguments ("configuration/truth.lua") and then you can debug using Xcode.

</ul>

\section windows Windows, 32-bit computer

\subsection dependencies Install the dependencies
<ul> 

<li> <b>SCons</b> <br>
First install a 2.x version of <a href="http://www.python.org/download/">Python</a> (preferably the latest 2.x version, but any version from 2.4 should be fine). Then install <a href="http://www.scons.org/">SCons</a>. Add the path of the SCons program to the environment variable <code>PATH</code> (right-click on My Computer -> Properties -> Advanced -> Environment Variables).</li>


<li> <b>Download precompiled libraries</b> <br>

Not all the libraries are needed for all the methods, select and install the ones you will want to use in your assimilation.

- Lua (always required). On <a href="http://luabinaries.sourceforge.net/download.html">the Lua Binaries webpage</a>, download the archive containing the Windows x86 DLL and Includes (at the time this page is written: <code>lua5_1_4_Win32_dll8_lib.zip</code>). Extract the archive and put the extracted directory in your PATH environment variable. In this directory, rename <code>lua51.lib</code> in <code>lua.lib</code>.

- Blas and Lapack (highly recommended). Download on <a href="http://www.fi.muni.cz/~xsvobod2/misc/lapack/">this webpage</a> the archive for the shared version, statically-linked. Extract the archive to some directory. Add this directory to your <code>PATH</code> environment variable. Inside the directory, rename <code>blas_win32_MT.lib</code> in <code>blas.lib</code> and <code>lapack_win32_MT.lib</code> in <code>lapack.lib</code>. <br>

- Atlas (highly recommended). Download on <a href="http://www.netlib.org/atlas/archives/windows/">this webpage</a> the file <code>atlas330_WinNT_P4SSE2.zip</code>. Extract the archive and put the extracted directory <code>WinNT_P4SSE2</code> in your <code>PATH</code> environment variable. Inside this directory, rename the <code>libcblas.a</code> in <code>cblas.lib</code> and <code>libatlas.a</code> in <code>atlas.lib</code>. <br>

</li>

- If you need SuperLU (needed only if one uses sparse matrices), see the section below.

<li> <b>Create SuperLU library</b> (optional) <br>

Download the SuperLU archive at <a href="http://crd.lbl.gov/~xiaoye/SuperLU/">SuperLU</a>. Take the sequential version 4.1 and expand it. <br>

Within Microsoft Visual Studio, create a new Win32 Console Application. Start with an empty project. Then add to the project all the <code>.c</code> and <code>.h</code> files from <code>SuperLU_4.1\\SRC</code> directory (Project -> Add existing item). Change the configuration to build a release version (Build -> Configuration Manager -> Configuration -> Release). <br>

Specify the <code>SuperLU\\SRC</code> location in <code>Additional Include Directories</code> (Project -> Properties -> Configuration Properties -> C/C++ -> General). Change the property of the project to make the output as Library file <code>.lib</code> (neither <code>.exe</code> nor <code>.dll</code> file), in Project -> Properties -> Configuration Properties -> General -> Configuration Type. <br>

Compile the project to produce the library file <code>superlu.lib</code> (Build -> Build Solution).
</li>


</ul>

\subsection project Create a Verdandi project
<ul>
<li> Download %Verdandi and expand it to the directory of your choice. </li>

<li> Create a %Verdandi project within Microsoft Visual Studio (File -> New -> Project). In Visual C++/General, select Makefile Project. Choose a name and a location (for example <code>Verdandi_solution</code> and <code>C:\\Projects</code>). The generic build command line is <code>scons</code>, the clean command line is <code>scons -c</code> and the rebuild command line is <code>scons -c && scons</code>.</li>
</ul>

\subsection test Run a test
<ul>

<li> In the directory <code>C:\\Projects\\Verdandi_solution</code> (or in whatever directory you put your Makefile Project): (1) copy the <code>SConstruct</code> file from <code>verdandi-[version]\\src\\example\\quadratic_model\\</code>, (2) copy an example like <code>verdandi-[version]\\src\\example\\quadratic_model\\forward.cpp</code>, and its configuration directory <code>verdandi-[version]\\src\\example\\quadratic_model\\configuration\\</code>, and (3) create an empty directory <code>result\\</code>. Then edit the <code>SConstruct</code> file so that it looks like this : 

\precode
import os

# Put the path to Verdandi.
# Also editable from command line with option "verdandi".
verdandi_path = "C:\\verdandi-0.8"

flag_cpp = "/nologo /EHsc /MD"
linker = "LINK"
# Put here the list of directories containing the library files to be included.
include_path = [""]
# Put here the list of directories containing the .lib files.
library_path = ["C:\\Program Files\\Lua\\5.1\\lib", "C:\\Program Files\\Blas_Lapack",
                "C:\\Program Files\\WinNT_P4SSE2"]

execfile(os.path.join(verdandi_path, "share\\SConstruct"))
\endprecode
</li>

The quadratic model has dependencies to the Lua, Blas, Lapack and Cblas libraries, but other models can require to add some more paths to the <code>include_path</code> and <code>library_path</code> variables.

<li> Edit the Project -> Properties. In Configuration Properties -> NMake, set the build command line to <code>scons forward.exe</code> and the rebuild command line to <code>scons -c && scons forward.exe</code>. Set the output to <code>forward.exe</code>. </li>

<li> Compile with Build -> Build solution. Specify the argument for <code>forward.exe</code>; i.e., put <code>configuration\truth.lua</code> in Configuration Properties -> Debugging -> Command Arguments. To run the example, launch Debug -> Start Without Debugging. If you are told that the executable is out of date, check the box so that you will not be asked again and click on <code>No</code> (do not rebuild the project). </li>

</ul>
*/
