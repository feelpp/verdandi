/*! \file python.dox
    \brief Python Interface and Visualization Example with ipython.
*/

/*!
\page python Python

\section interface Python interface
%Verdandi comes with a Python interface generated by <a
href="http://www.swig.org/">Swig</a>.

This page only addresses the compilation and the use of the interface under
Linux. The generation of the interface was not tested on another platform
yet. No known issue should prevent the interface from running successfully on
another platform.

\subsection compilation Compiling the interface

In addition to a C++ compiler, one needs Swig 1.3.x. Swig 1.1 cannot
generate the interface. You will also need Python (say, 2.5 or 2.6, but
previous versions should work too) and its headers.

In <code>python</code> directory, you may simply launch <code>scons
swig</code> if you have <a href="http://www.scons.org/">SCons</a> installed
(version &gt;=1.0).

This should generate the Python module <code>verdandi.py</code> and the
shared library <code>_verdandi.so</code>.  You may want to place these two files
in a directory of your <code>$PYTHONPATH</code>, where Python searches for
modules (in addition to the local directory <code>.</code>).

\subsection interface Using the interface

In <code>python</code> directory, or in any place if
<code>verdandi.py</code> and <code>_verdandi.so</code> are in a directory of
<code>$PYTHONPATH</code>, you may launch Python and load the module.

It is recommended to use <a href="http://ipython.scipy.org/">IPython</a>
instead of the regular Python shell, for convenience:

\precode
$ ipython -pylab

In  [1]: import seldon
In  [2]: import verdandi

In  [3]: method = verdandi.AssimilationMethod(''configuration_file.cfg'')
In  [4]: method.Initialize(''configuration_file.cfg'')

In  [5]: model = method.GetModel()
In  [6]: model.GetDate()
Out [6]: 0
\endprecode

<code>Forward()</code> can be processed either by calling the driver method or
directly by calling the model method:

\precode
In  [7]: method.Forward()
In  [8]: model.GetDate()
Out [9]: 1
In [10]: model.Forward()
In [11]: model.GetDate()
Out[12]: 2
  
In [13]: for i in range(1008):
   ....:      model.Forward()
In [14]: model.GetDate()
Out[14]: 1010
\endprecode

Here is an example of the computation of an analysis. You may want to check
its effect by printing the state vector before and after the analysis:

\precode
In [15]: state_vector = seldon.VectorDouble()

In [16]: model.GetState(state_vector)
In [17]: state_vector.Print()
1.0167881998005845468   1.0150381428637218484 ...

In [18]: method.Analyze()
In [19]: model.GetState(state_vector)
In [20]: state_vector.Print()
1.0167882075200211922   1.0150381458769643928  ...
\endprecode

Here is an example of the interactivity of the high-level interface: the first
element of the state vector is set to an arbitrary value:
\precode
In [21]: state_vector[0] = 0
In [22]: model.SetState(state_vector)
In [23]: model.GetState(state_vector)
In [24]: state_vector.Print()
0  1.0150381458769643928  ...
\endprecode

\section example Visualization example with ipython

To load the results, you can launch:

\precode
$ ipython -pylab 
\endprecode

and then

\precode
In  [1]: run load.py result/river-truth
In  [2]: h_t = h
In  [3]: run load.py result/river
         
In  [4]: plot(time_evolution(h_t - h, rms))
         
In  [5]: plot(h_t[100])
In  [6]: plot(h[100])
\endprecode

*/
