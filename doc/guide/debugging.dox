/*! \file debugging.dox
    \brief Debugging.
*/

/*!
\page debugging Debugging

\section logger Logger

\section message_handler Message handler

\section exceptions Exceptions raised

The objects that may be launched by %Verdandi are of type:
<code>ErrorConfiguration</code>, <code>ErrorIO</code>,
<code>ErrorProcessing</code>, <code>ErrorUndefined</code>,
<code>ErrorArgument</code>. They all derive from <code>Error</code>. They
provide the method \link Verdandi::Error::What() What() \endlink that returns a string explaining the
error, and the method \link Verdandi::Error::CoutWhat() CoutWhat() \endlink that displays on screen this
explanation.

\section exceptions_and_debugging Exceptions and debugging

Suppose your code contains an error and raises an exception. You probably
want to identify the function that raised the exception. The error message
should contain the name of the function. But you probably want to know the
exact line where the error occurred and the sequence of calls. Then, you have
two options, using a debugger.

One option is to place a breakpoint in <code>Error::Error(string function =
"", string comment = "")</code> (see file <code>share/Error.cxx</code>) because this
constructor should be called before the exception is actually raised.

Another option, more convenient because no breakpoint is to be placed, is
to define <code>VERDANDI_WITH_ABORT</code>. With that flag activated, if a
%Verdandi exception is raised, the program will simply abort. The call stack is
then at hand.

*/
