/*! \file tips.dox
    \brief Tips.
*/

/*!
\page tips Tips

\section getting_started Getting started: how to compile your first program

For the installation, see the section \ref installation.

<code>Verdandi.hxx</code> is the only file to be included and it is located in the directory <code>Verdandi-[version]/</code> expanded from the archive. To include %Verdandi, edit your program to add the following lines (the second one is optional):

\precode
#include "Verdandi.hxx"
using namespace Verdandi;
\endprecode

In the directory containing your program, copy the <code>SConstruct</code> file provided in the examples. Edit the <code>SConstruct</code> file to specify your <code>verdandi_path/</code> by adding this line:

\precode
verdandi_path = "your_verdandi_path"
\endprecode

Compile your program with:
\prescreen
scons
\endprescreen

If you want to compile one specific program:
\prescreen
scons my_executable_program
\endprescreen

\section options Options

Here is the list of %Verdandi options you may define. To define an option <code>VERDANDI_OPTION</code>, add this line to your program:

\precode
#define VERDANDI_OPTION
\endprecode

Defining <code>VERDANDI_WITH_ABORT</code> makes the program abort if a %Verdandi exception is raised (see explanation below in section \ref exceptions_and_debugging of page \ref debugging). 

Defining <code>VERDANDI_IGNORE_MESSAGE</code> skips the processing of messages sent between the objects.

You may define either <code>VERDANDI_DENSE</code> or <code>VERDANDI_SPARSE</code>, respectively to work with dense or sparse matrices for the error variances and the observation tangent operator.  If none of these options is defined, the error variances and the observation operator are not stored in a matrix, and the computation is made row by row. The options defined with <code>VERDANDI_DENSE</code> are <code>VERDANDI_TANGENT_LINEAR_OPERATOR_DENSE</code> and
<code>VERDANDI_STATE_ERROR_DENSE</code>. The options defined with <code>VERDANDI_SPARSE</code> are <code>VERDANDI_TANGENT_LINEAR_OPERATOR_SPARSE</code>, <code>VERDANDI_OBSERVATION_ERROR_SPARSE</code> and <code>VERDANDI_STATE_ERROR_SPARSE</code>. If you want to mix dense and sparse structures, you may define the option of your choice for each matrix (error variances and the observation tangent operator).

A level of priority for the logger messages can be set by defining <code>VERDANDI_LOGGING_LEVEL</code>.

Setting <code>GETPOT_ACTIVATE_EXCEPTION</code> at <code>true</code> activates the raising of exceptions related to GetPot, the configuration file parser.

\section configuration_file Building and reading a configuration file

Configuration files are read by <a href="http://getpot.sourceforge.net/">GetPot</a>. The following shows you some example, that you could write in your configuration file <code>my_configuration.cfg</code>:

\precode
# Double value.
Delta_t = 0.03

# Integer value. 
Nx = 100

[common] [1]

    [common/output_saver] [2]

    Mode = binary
  
  
[shallow_water]

    [shallow_water/domain]

    # Variable replacement.
    Mode = ${common/output_saver/Mode} [3]
   
    # Numeric expressions.
    Final_date = '${* 1500 ${Delta_t}}' [4]
\endprecode

To read these values from the configuration file, you may use:

\precode
GetPot configuration_stream("my_configuration.cfg"); [5]

double Delta_t_;
configuration_stream.set("Delta_t", Delta_t_); [6]

int Nx_;
configuration_stream.set("Nx", Nx_, "", 100); [7]

configuration_stream.set_prefix("shallow_water/domain/"); [8]
string mode_;
configuration_stream.set("Mode", mode_, "'text' | 'binary'"); [9]

double final_date_;
configuration_stream.set("Final_date", final_date_);
\endprecode


\comment
<li>To make things easier, variables can be sorted into sections ... </li>
<li>... and subsections. </li>
<li>This variable <code>Mode</code> takes the value of the variable <code>Mode</code> defined in the section <code>common/output_saver</code>. </li>
<li>The <code>Final_date</code> is <code>1500</code> times the value of the variable <code>Delta_t</code>. </li>
<li>A <code>GetPot</code> object called <code>configuration_stream</code> is built to parse the file <code>my_configuration.cfg</code>. </li>
<li>Here is the simplest way to read from a configuration file: the value of the variable <code>Delta_t</code> is stored in <code>Delta_t_</code>. </li>
<li>The variable <code>Nx</code> is read from the configuration file and stored in <code>Nx_</code>. If it is wrongly typed or inexistent, the default value <code>100</code> will be returned in <code>Nx_</code>. Default values can also be specified for double values and strings. </li>
<li>Here is set the prefix <code>shallow_water/domain/</code>: the values will be read in this section until another prefix is provided to GetPot. </li>
<li>The variable <code>Mode</code> is read in the configuration file. It has to meet the constraint of being either <code>"text"</code> or <code>"binary"</code>; if not, an exception will be thrown. Constraints can also be expressed for numerical values, for instance: <code>"<= 16 & % 2 | > 16 & ! % 2"</code>. To meet this constraint, an even number has to be inferior or equal to 16; otherwise, an odd number has to be superior to 16. </li>
\endcomment

\section matrix_vector Seldon matrices and vectors

The structures manipulated in %Verdandi are <a href="http://seldon.sourceforge.net/">Seldon</a> vectors and matrices.

Vectors are instances of the class <code>Vector</code>. Class <code>Vector</code> is a template class: <code>Vector&lt;T, Storage, Allocator&gt;</code>. <code>T</code> is the type of the elements to be stored (e.g. <code>double</code>). <code>Storage</code> defines how the vector is stored.  <code>Storage</code> is equal to <code>VectFull</code> by default for full vectors, you can set it to <code>VectSparse</code> for sparse vectors. Finally, <code>Allocator</code> defines the way memory is managed. It is close to STL allocators. See the section "Allocators" for further details.

Matrices are instances of the class <code>Matrix</code>. Class <code>Matrix</code> is a template class: <code>Matrix&lt;T, Prop, Storage, Allocator&gt;</code>. As for vectors, <code>T</code> is the type of the elements to be stored (e.g. <code>double</code>).

<code>Prop</code> indicates that the matrix has given properties (symmetric, hermitian, positive definite or whatever). This template parameter is never used by Seldon; so the user may define its own properties. Thanks to this template parameter, the user may overload some functions based on the properties of the matrix. Seldon defines two properties: <code>General</code> (default) and <code>Symmetric</code>.

<code>Storage</code> defines how the matrix is stored. Matrices may be stored in several ways. <code>RowMajor</code> is the default storage.

Finally, <code>Allocator</code> defines the way memory is managed. It is close to STL allocators.

*/
